{"version":3,"sources":["components/ContactUs.jsx","components/Login.jsx","components/Project.jsx","components/Home.jsx","components/Auth.jsx","components/NotFound.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Contactt","state","console","log","this","props","id","match","params","name","react_default","a","createElement","Component","Login","value","handleChange","event","target","_this","setState","handleSubmit","preventDefault","axios","method","url","data","password","then","response","isAuthenticated","window","catch","error","Redirect","to","onSubmit","type","onChange","Link","React","Project","pushUrl","history","push","replaceUrl","replace","qs","location","search","age","onClick","Home","goForward","goBackForward","goBack","PrivateRoute","_ref","component","path","Route","render","App","exact","Auth","ContactUs","Boolean","hostname","ReactDOM","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.957f912e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n\n// Functional Component\n// Dumb Component\n// Stateless\n// Presentational Component\n\n\n// Class Component\n// Container\n// StateFull\n// Smart\nclass Contactt extends Component {\n\n  state = {\n\n  };\n\n\n  render() {\n    console.log('Props: ', this.props);\n    const id = this.props.match.params.id;\n    const name = this.props.match.params.name;\n\n    // JSX\n    return(\n      <div>\n        <h1>ID: {id}</h1>\n        <h1>Name: {name}</h1>\n        <h2>I am the Contactt Component</h2>\n      </div>\n    );\n  }\n}\n\nexport default Contactt;","import React from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport axios from 'axios';\n\nclass Login extends React.Component {\n\n  state = {\n    value: ''\n  };\n\n  handleChange = (event) => {\n    const value = event.target.value;\n    this.setState({ value });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault(); // stop the page from refreshing\n    const data = {\n      password: '12345'\n    };\n\n    axios({\n      method: 'POST',\n      url: '/login',\n      data: data\n    })\n      .then((response) => {\n        console.log('Response: ', response.data);\n        const isAuthenticated = response.data.isAuthenticated;\n\n        window.isAuthenticated = isAuthenticated;\n        this.setState({\n          isAuthenticated\n        });\n\n\n      })\n      .catch((error) => {\n        console.log('Error: ', error);\n      });\n    // TODO\n    // Send the data to my Server\n    // Receive the reponse back from the server\n    // const isAuthenticated = true; // from the server\n\n  };\n\n  render() {\n\n    if (this.state.isAuthenticated) {\n      return <Redirect to='/project?name=patrick&age50' />\n    }\n\n    // JSX\n    return (\n      <div>\n        <h2>I am the Login Component</h2>\n        <form onSubmit={this.handleSubmit}>\n          <div>\n            <input type=\"text\" onChange={this.handleChange} />\n          </div>\n\n          <button>Login</button>\n\n        </form>\n\n        <Link to='/project?name=patrick&age=5'> Go to Project </Link> <br />\n        <Link to='/contact/50/patrick'> Go to Contact </Link>\n      </div>\n    );\n  }\n}\n\nexport default Login;","import React from 'react';\nimport qs from 'stringquery';\n\n\nclass Project extends React.Component {\n\n\n\n  pushUrl = () => {\n    this.props.history.push('/contact');\n  };\n\n  replaceUrl = () => {\n    this.props.history.replace('/contact');\n  };\n\n  \n  render() {\n\n    const data = qs(this.props.location.search);\n\n    console.log('Props: ', this.props);\n    console.log('Data: ', data);\n    // JSX\n    return (\n      <div>\n\n        <h1>Name: {data.name}</h1>\n        <h1>Name: {data.age}</h1>\n        <h2>I am the Project Component</h2>\n\n\n        <button onClick={this.pushUrl}>PUSH</button>\n        <button onClick={this.replaceUrl}>REPLACE</button>\n      </div>\n    );\n  }\n}\n\nexport default Project;","import React from 'react';\nimport { Redirect, Link } from 'react-router-dom';\n\n\nclass Home extends React.Component {\n\n\n  goForward = () => {\n    this.props.history.goForward();\n  };\n\n  goBackForward = () => {\n    this.props.history.goBack();\n  };\n\n\n\n  render() {\n\n    const isAllowed = true;\n    \n    // JSX\n    return (\n      <div>\n        <h2>I am the Home Component</h2>\n\n        <Link to=\"/project\">Click me</Link>\n\n        <button onClick={this.goBackForward}>Go Backward</button>\n        <button onClick={this.goForward}>Go Forward</button>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\n\nconst PrivateRoute = ({ component: Component, path: url }) => {\n    const isAuthenticated = window.isAuthenticated; // user is not authenticated\n\n    return <Route path={url} render={(props) => (\n        isAuthenticated === true ? <Component {...props} /> : <Redirect to='/login' />\n    )} />;\n};\n\nexport default PrivateRoute;","import React from 'react';\nimport { Redirect, Link } from 'react-router-dom';\n\n\nclass NotFound extends React.Component {\n\n\n\n\n  render() {\n\n    // JSX\n    return (\n      <div>\n        <h2>I am the NotFound Component</h2>\n\n\n      </div>\n    );\n  }\n}\n\nexport default NotFound;","import React from 'react';\n\nimport { Route, Redirect } from 'react-router-dom';\n\n// pages\nimport ContactUs from './components/ContactUs';\nimport Login from './components/Login';\nimport Project from './components/Project';\nimport Home from './components/Home';\nimport NotFound from './components/NotFound';\n\n\n// Redux\n// Mobx\n// Flux\n\nimport PrivateRoute from './components/Auth';\n\n\nclass App extends React.Component {\n\n\n  render() {\n\n\n    // JSX\n    return (\n      <div>\n\n        <Route exact path='/' component={Home} />\n        <PrivateRoute path='/contact/:id/:name' component={ContactUs} />\n        <PrivateRoute path='/project' component={Project} />\n        <Route path='/login' component={Login} />\n        {/* <Route component={NotFound} /> */}\n\n      </div>\n    );\n  }\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}